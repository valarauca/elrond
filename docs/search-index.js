var searchIndex = {};
searchIndex["elrond"] = {"doc":"Elrond reads Elf files","items":[[4,"IResult","elrond","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",0,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",0,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",0,null],[3,"Section","","",null,null],[12,"sh_name","","",1,null],[12,"sh_type","","",1,null],[12,"sh_flags","","",1,null],[12,"sh_addr","","",1,null],[12,"sh_offset","","",1,null],[12,"sh_size","","",1,null],[12,"sh_link","","",1,null],[12,"sh_info","","",1,null],[12,"sh_addralign","","",1,null],[12,"sh_entsize","","",1,null],[3,"Elf_Half","","",null,null],[12,"0","","",2,null],[3,"Elf_SHalf","","",null,null],[12,"0","","",3,null],[3,"Elf_Word","","",null,null],[12,"0","","",4,null],[3,"Elf_SWord","","",null,null],[12,"0","","",5,null],[3,"Elf_XWord","","",null,null],[12,"0","","",6,null],[3,"Elf_Sxword","","",null,null],[12,"0","","",7,null],[3,"ElfHeader","","Full Elf Header",null,null],[12,"endian","","",8,null],[12,"wordsize","","",8,null],[12,"abi","","",8,null],[12,"kind","","",8,null],[12,"arch","","",8,null],[12,"entry","","",8,null],[12,"phoff","","",8,null],[12,"shoff","","",8,null],[12,"flags","","",8,null],[12,"ehsize","","",8,null],[12,"phentsize","","",8,null],[12,"phnum","","",8,null],[12,"shentsize","","",8,null],[12,"shnum","","",8,null],[12,"shstrndx","","",8,null],[3,"ProgramHeaderTable","","",null,null],[12,"kind","","",9,null],[12,"offset","","",9,null],[12,"vaddr","","",9,null],[12,"paddr","","",9,null],[12,"flags","","",9,null],[12,"memsize","","",9,null],[12,"align","","",9,null],[12,"filesz","","",9,null],[3,"Elf","","Holds the ELF Data",null,null],[12,"header","","",10,null],[12,"sections","","",10,null],[12,"progheader","","",10,null],[4,"SectionType","","",null,null],[13,"Null","","",11,null],[13,"Progbits","","",11,null],[13,"Symtab","","",11,null],[13,"Strtab","","",11,null],[13,"Rela","","",11,null],[13,"Hash","","",11,null],[13,"Dynamic","","",11,null],[13,"Note","","",11,null],[13,"NoBits","","",11,null],[13,"Rel","","",11,null],[13,"Shlib","","",11,null],[13,"DynSyn","","",11,null],[13,"Num","","",11,null],[13,"LoProc","","",11,null],[13,"HiProc","","",11,null],[13,"LoUser","","",11,null],[13,"HiUser","","",11,null],[4,"SegFlag","","",null,null],[13,"Write","","",12,null],[13,"Alloc","","",12,null],[13,"ExecInstr","","",12,null],[13,"RelaLivePatch","","",12,null],[13,"RoAfterInit","","",12,null],[13,"MaskProc","","",12,null],[4,"Elf_Addr","","",null,null],[13,"Bits32","","",13,null],[13,"Bits64","","",13,null],[4,"Elf_Off","","",null,null],[13,"Bits32","","",14,null],[13,"Bits64","","",14,null],[4,"Elf_VarWord","","",null,null],[13,"Bits32","","",15,null],[13,"Bits64","","",15,null],[4,"ABI","","",null,null],[13,"SystemV","","",16,null],[13,"HPUX","","",16,null],[13,"NetBSD","","",16,null],[13,"Linux","","",16,null],[13,"Solaris","","",16,null],[13,"AIX","","",16,null],[13,"IRIX","","",16,null],[13,"FreeBSD","","",16,null],[13,"OpenBSD","","",16,null],[13,"OpenVMS","","",16,null],[13,"NonStopKernel","","",16,null],[13,"AROS","","",16,null],[13,"FenixOS","","",16,null],[13,"CloudABI","","",16,null],[13,"Sortix","","",16,null],[13,"StandAlone","","",16,null],[4,"Kind","","",null,null],[13,"Relocatable","","",17,null],[13,"Executable","","",17,null],[13,"Shared","","",17,null],[13,"Core","","",17,null],[13,"Loproc","","",17,null],[13,"Hiproc","","",17,null],[4,"Arch","","",null,null],[13,"None","","",18,null],[13,"M32","","",18,null],[13,"Sparc","","",18,null],[13,"Intel386","","",18,null],[13,"Motorola68k","","",18,null],[13,"Motorola88k","","",18,null],[13,"INTEL486","","",18,null],[13,"INTEL860","","",18,null],[13,"MIPS","","",18,null],[13,"PaRISC","","",18,null],[13,"SPARC32PLUS","","",18,null],[13,"PowerPC","","",18,null],[13,"PowerPC64","","",18,null],[13,"CellBESPU","","",18,null],[13,"ARM","","",18,null],[13,"SuperH","","",18,null],[13,"SPARCv9","","",18,null],[13,"H8300","","",18,null],[13,"IntelHP64","","",18,null],[13,"AMD64","","",18,null],[13,"IBMS390","","",18,null],[13,"CRIS","","",18,null],[13,"RenesasM32R","","",18,null],[13,"MEIMN10300AM33","","",18,null],[13,"OpenRISC","","",18,null],[13,"BlackFin","","",18,null],[13,"AlteraNOIS2","","",18,null],[13,"TIC6xDPS","","",18,null],[13,"Aarch64","","",18,null],[13,"TilePRO","","",18,null],[13,"MicroBlaze","","",18,null],[13,"TileGX","","",18,null],[13,"LinuxBPF","","",18,null],[13,"FRV","","",18,null],[13,"AtmelAVR32","","",18,null],[13,"Alpha","","",18,null],[13,"CygnusM32R","","",18,null],[13,"OLDS390","","",18,null],[13,"CygnusMN10300","","",18,null],[4,"RamFlags","","",null,null],[13,"Read","","",19,null],[13,"Write","","",19,null],[13,"Exec","","",19,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"into","","",13,null],[11,"from","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",13,null],[11,"from","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",13,null],[11,"from","","",13,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"into","","",14,null],[11,"from","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",14,null],[11,"from","","",14,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",14,null],[11,"from","","",14,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"into","","",15,null],[11,"from","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",15,null],[11,"from","","",15,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",15,null],[11,"from","","",15,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"into","","",2,null],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"into","","",3,null],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"into","","",3,null],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"into","","",3,null],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"into","","",3,null],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"into","","",4,null],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",4,null],[11,"from","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",4,null],[11,"from","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"into","","",5,null],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"into","","",5,null],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"into","","",5,null],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"into","","",6,null],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"into","","",6,null],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"into","","",7,null],[11,"from","","",7,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"into","","",7,null],[11,"from","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",18,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"get_flags","","",1,null],[11,"read_data","","Return&#39;s that data from the File associated with this section",1,null],[11,"borrow_data","","Return the data as an aliased borrow",1,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"eq","","",19,null],[11,"ram_flags","","Read RAM flags",9,null],[11,"read_data","","Return&#39;s that data from the File associated with this section",9,null],[11,"borrow_data","","Return the data as an aliased borrow",9,null],[11,"parse","","Parse a buffer.",10,null],[14,"parse_test","","",null,null],[14,"build_enum","","",null,null],[14,"std_val","","",null,null],[14,"generate_reader","","",null,null],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",0,null],[11,"unwrap_err","","Unwrap the contained `Error(E)` value, or panic if the `IResult` is not\n`Error`.",0,null],[11,"to_full_result","","Convert the IResult to a std::result::Result",0,null],[11,"to_result","","Convert the IResult to a std::result::Result",0,null],[11,"is_done","","",0,null],[11,"is_err","","",0,null],[11,"is_incomplete","","",0,null],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",0,null],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",0,null],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",0,null],[11,"unwrap_inc","","Unwrap the contained `Incomplete(n)` value, or panic if the `IResult` is not\n`Incomplete`.",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"output","","",0,null],[11,"output","","",0,null],[11,"output","","",0,null],[11,"clone","","",0,null],[11,"remaining_input","","",0,null],[11,"remaining_input","","",0,null],[11,"remaining_input","","",0,null]],"paths":[[4,"IResult"],[3,"Section"],[3,"Elf_Half"],[3,"Elf_SHalf"],[3,"Elf_Word"],[3,"Elf_SWord"],[3,"Elf_XWord"],[3,"Elf_Sxword"],[3,"ElfHeader"],[3,"ProgramHeaderTable"],[3,"Elf"],[4,"SectionType"],[4,"SegFlag"],[4,"Elf_Addr"],[4,"Elf_Off"],[4,"Elf_VarWord"],[4,"ABI"],[4,"Kind"],[4,"Arch"],[4,"RamFlags"]]};
initSearch(searchIndex);
